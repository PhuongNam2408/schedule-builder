'use client';

import { useState } from 'react';
import Image from 'next/image';
import { Camera, MapPin, ArrowLeft, Plus } from 'lucide-react';
import { photobooths, Photobooth } from '@/data/venues';
import { useSchedule } from '@/context/ScheduleContext';

export default function PhotoboothSelection() {
  const { selectedPhotobooth, setSelectedPhotobooth, nextStep, prevStep } = useSchedule();
  const [hoveredId, setHoveredId] = useState<string | null>(null);
  const [showCustomInput, setShowCustomInput] = useState(false);
  const [customName, setCustomName] = useState('');

  const handleSelect = (photobooth: Photobooth) => {
    setSelectedPhotobooth(photobooth);
    setTimeout(() => nextStep(), 500);
  };

  const handleCustomSubmit = async () => {
    if (!customName.trim()) return;

    const customPhotobooth: Photobooth = {
      id: `custom-${Date.now()}`,
      name: customName.trim(),
      address: 'ƒê·ªãa ch·ªâ t√πy ch·ªçn',
      image: '/placeholder-photobooth.jpg',
      tiktokUrl: '#'
    };

    // L∆∞u v√†o database
    try {
      await fetch('/api/custom-venues', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          type: 'photobooth',
          name: customName.trim()
        })
      });
    } catch (error) {
      console.error('Error saving custom venue:', error);
    }

    setSelectedPhotobooth(customPhotobooth);
    setTimeout(() => nextStep(), 500);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-pink-100 p-6">
      <div className="max-w-6xl mx-auto">
        {/* Back button at top-left */}
        <div className="mb-8">
          <button
            onClick={prevStep}
            className="flex items-center text-pink-600 hover:text-pink-800 text-sm font-medium bg-white rounded-full px-4 py-2 shadow-md hover:shadow-lg transition-all duration-200"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            <span>Quay l·∫°i ch·ªçn Qu√°n cafe</span>
          </button>
        </div>

        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            üì∏ Ch·ªçn Photobooth
          </h1>
          <p className="text-lg text-gray-700 font-medium max-w-2xl mx-auto text-justify indent-8">
            Anh bi·∫øt l√† hi·ªán t·∫°i em th·ª±c s·ª± c·∫£m th·∫•y kh√¥ng tho·∫£i m√°i khi ch·ª•p photobooth v·ªõi anh, th·∫ø nh∆∞ng m√† anh v·∫´n mu·ªën c·ªë g·∫Øng m·ªôt l·∫ßn n·ªØa. Th·ª±c s·ª± l√† b·ªçn m√¨nh ƒë√£ r·∫•t h·∫°nh ph√∫c khi ƒë∆∞·ª£c ·ªü b√™n nhau, ch·ª•p v·ªõi nhau t·ª´ng b·ª©c ·∫£nh, nh√¨n nhau, √¥m nhau, r·ªìi h√¥n nhau v·ªõi nh·ªØng t√¨nh c·∫£m ch√¢n th·∫≠t nh·∫•t. Li·ªáu em c√≥ c√≤n mu·ªën l∆∞u l·∫°i nh·ªØng kho·∫£nh kh·∫Øc ƒë·∫πp nh·∫•t c·ªßa ch√∫ng ta hong? üì∑üíï
          </p>
        </div>

        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {photobooths.map((photobooth) => (
            <div
              key={photobooth.id}
              className={`bg-white rounded-2xl shadow-lg overflow-hidden cursor-pointer transform transition-all duration-300 ${
                selectedPhotobooth?.id === photobooth.id
                  ? 'ring-4 ring-purple-400 scale-105'
                  : hoveredId === photobooth.id
                  ? 'scale-105 shadow-xl'
                  : 'hover:shadow-xl'
              }`}
              onClick={() => handleSelect(photobooth)}
              onMouseEnter={() => setHoveredId(photobooth.id)}
              onMouseLeave={() => setHoveredId(null)}
            >
              <div className="relative">
                <Image
                  src={photobooth.image}
                  alt={photobooth.name}
                  width={400}
                  height={192}
                  className="w-full h-48 object-cover"
                />
                <div className="absolute top-4 left-4 bg-purple-500 text-white rounded-full p-2">
                  <Camera className="h-4 w-4" />
                </div>
              </div>

              <div className="p-6">
                <h3 className="text-xl font-bold text-gray-900 mb-2">
                  {photobooth.name}
                </h3>
                
                <div className="flex items-center text-gray-700 font-medium mb-3">
                  <MapPin className="w-4 h-4 mr-1" />
                  <span className="text-sm">{photobooth.address}</span>
                </div>
                
                <div className="flex items-center justify-between">
                  {photobooth.tiktokUrl && photobooth.tiktokUrl !== "" && (
                    <a 
                      href={photobooth.tiktokUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="flex items-center text-pink-500 hover:text-pink-600 text-sm font-medium"
                    >
                      <span className="mr-1">üì±</span>
                      <span>Xem TikTok</span>
                    </a>
                  )}
                  
                  {selectedPhotobooth?.id === photobooth.id && (
                    <div className="bg-purple-500 text-white px-3 py-1 rounded-full text-sm font-semibold text-center">
                      ƒê√£ ch·ªçn üíú
                    </div>
                  )}
                </div>
              </div>
            </div>
          ))}
          
          {/* Custom option card */}
          <div className="bg-white rounded-2xl shadow-lg overflow-hidden border-2 border-dashed border-purple-300 hover:border-purple-400 transition-all duration-300">
            {!showCustomInput ? (
              <div 
                className="p-8 text-center cursor-pointer hover:bg-purple-50 transition-colors duration-200"
                onClick={() => setShowCustomInput(true)}
              >
                <div className="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Plus className="w-8 h-8 text-purple-500" />
                </div>
                <h3 className="text-xl font-bold text-gray-800 mb-2">
                  Photobooth kh√°c
                </h3>
                <p className="text-gray-600 text-sm">
                  Nh·∫≠p t√™n photobooth b·∫°n mu·ªën ƒëi
                </p>
              </div>
            ) : (
              <div className="p-6">
                <h3 className="text-lg font-bold text-gray-800 mb-4">
                  Nh·∫≠p t√™n photobooth c·ªßa b·∫°n
                </h3>
                <input
                  type="text"
                  value={customName}
                  onChange={(e) => setCustomName(e.target.value)}
                  placeholder="VD: H√†n Qu·ªëc Studio..."
                  className="w-full p-3 border border-gray-300 rounded-lg mb-4 focus:ring-2 focus:ring-purple-500 focus:border-transparent text-gray-900 placeholder-gray-500"
                  onKeyPress={(e) => e.key === 'Enter' && handleCustomSubmit()}
                  autoFocus
                />
                <div className="flex gap-2">
                  <button
                    onClick={handleCustomSubmit}
                    disabled={!customName.trim()}
                    className="flex-1 bg-purple-500 text-white py-2 px-4 rounded-lg hover:bg-purple-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors duration-200"
                  >
                    Ch·ªçn ch·ªó n√†y üì∑
                  </button>
                  <button
                    onClick={() => {
                      setShowCustomInput(false);
                      setCustomName('');
                    }}
                    className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors duration-200"
                  >
                    H·ªßy
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>

        <div className="text-center mt-8">
          <p className="text-gray-500 italic mb-6">
            üí° M·∫πo: Nh·ªõ xem th√™m link tiktok ƒë√£ ƒë∆∞·ª£c ƒë√≠nh k√®m ƒë·ªÉ tham kh·∫£o nh√©! 
          </p>
        </div>
      </div>
    </div>
  );
}
